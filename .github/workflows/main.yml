name: Smart Pivot Cache Extract (Full Decode + Overwrite)

on:
  workflow_dispatch:

jobs:
  extract:
    runs-on: ubuntu-latest

    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          pip install pandas pyarrow openpyxl lxml requests

      - name: Run Smart Pivot Extract
        env:
          TENANT_ID: ${{ secrets.TENANT_ID }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          USER_EMAIL: "tiennm@tuanvietc5.id.vn"
          SRC_FOLDER: "/1.Job/2425/1. Tracking/Pivot_Month_Par"
        run: |
          python - <<'PYCODE'
          import os, io, zipfile, requests, pandas as pd
          from lxml import etree

          TENANT_ID = os.environ["TENANT_ID"]
          CLIENT_ID = os.environ["CLIENT_ID"]
          CLIENT_SECRET = os.environ["CLIENT_SECRET"]
          USER_EMAIL = os.environ["USER_EMAIL"]
          SRC_FOLDER = os.environ["SRC_FOLDER"]
          GRAPH_API = "https://graph.microsoft.com/v1.0"

          print("🔐 Đang lấy access token ...")
          token_url = f"https://login.microsoftonline.com/{TENANT_ID}/oauth2/v2.0/token"
          token_data = {
              "grant_type": "client_credentials",
              "client_id": CLIENT_ID,
              "client_secret": CLIENT_SECRET,
              "scope": "https://graph.microsoft.com/.default",
          }
          token_res = requests.post(token_url, data=token_data)
          if not token_res.ok:
              print("❌ Không lấy được token:", token_res.text)
              exit(1)
          token = token_res.json().get("access_token")
          headers = {"Authorization": f"Bearer {token}"}

          # ===== Lấy Drive ID =====
          drive_info = requests.get(f"{GRAPH_API}/users/{USER_EMAIL}/drive", headers=headers).json()
          if "id" not in drive_info:
              print("❌ Không lấy được Drive ID:", drive_info)
              exit(1)
          drive_id = drive_info["id"]
          print("📁 Drive ID:", drive_id)

          # ===== Lấy danh sách file trong thư mục =====
          encoded_path = requests.utils.quote(SRC_FOLDER)
          list_url = f"{GRAPH_API}/drives/{drive_id}/root:{encoded_path}:/children"
          res = requests.get(list_url, headers=headers)
          if not res.ok:
              print("❌ Lỗi lấy danh sách:", res.text)
              exit(1)

          items = res.json().get("value", [])
          xlsx_files = [i for i in items if i["name"].lower().endswith(".xlsx")]
          print(f"🔎 Tìm thấy {len(xlsx_files)} file trong {SRC_FOLDER}")

          for f in xlsx_files:
              name = f["name"]
              print(f"\n📥 Đang xử lý: {name}")

              dl_url = f"{GRAPH_API}/drives/{drive_id}/items/{f['id']}/content"
              resp = requests.get(dl_url, headers=headers)
              if resp.status_code != 200:
                  print(f"❌ Lỗi tải file {name}: {resp.status_code}")
                  continue
              excel_bytes = resp.content

              if excel_bytes[:4] != b'PK\x03\x04':
                  print(f"⚠️ {name} không phải Excel hợp lệ.")
                  continue

              try:
                  with zipfile.ZipFile(io.BytesIO(excel_bytes)) as z:
                      record_files = [p for p in z.namelist() if "pivotCacheRecords" in p]
                      if not record_files:
                          print("⚠️ Không có pivotCacheRecords trong file.")
                          continue

                      for rec in record_files:
                          print(f"🔍 Bung {rec} ...")

                          # === Lấy phần sharedItems từ pivotCacheDefinition ===
                          def_path = rec.replace("Records", "Definition")
                          if def_path not in z.namelist():
                              print("⚠️ Không tìm thấy Definition tương ứng.")
                              continue

                          def_xml = etree.fromstring(z.read(def_path))
                          ns = {"d": "http://schemas.openxmlformats.org/spreadsheetml/2006/main"}

                          # Lấy danh sách cacheField + sharedItems
                          fields = []
                          shared_lookup = []
                          for fnode in def_xml.findall(".//d:cacheField", ns):
                              name_field = fnode.get("name") or fnode.get("caption") or "Field"
                              shared = []
                              si = fnode.find(".//d:sharedItems", ns)
                              if si is not None:
                                  for item in si:
                                      tag = etree.QName(item).localname
                                      val = None
                                      if tag == "s":
                                          val = item.get("v") or item.text
                                      elif tag == "n":
                                          try:
                                              val = float(item.get("v") or item.text or 0)
                                          except:
                                              val = item.get("v") or item.text
                                      elif tag == "b":
                                          val = "TRUE" if item.get("v") == "1" else "FALSE"
                                      shared.append(val)
                              shared_lookup.append(shared)
                              fields.append(name_field)

                          # === Giải nén dữ liệu thực từ pivotCacheRecords ===
                          root = etree.fromstring(z.read(rec))
                          rows = []
                          for row in root.findall(".//d:r", ns):
                              row_values = []
                              for i, v in enumerate(row.findall("./d:x", ns)):
                                  idx_text = v.text
                                  val = None
                                  if idx_text is not None:
                                      try:
                                          idx = int(idx_text)
                                          if i < len(shared_lookup) and idx < len(shared_lookup[i]):
                                              val = shared_lookup[i][idx]
                                          else:
                                              val = idx_text
                                      except:
                                          val = idx_text
                                  row_values.append(val)
                              rows.append(row_values)

                          if not rows:
                              print("⚠️ Cache rỗng.")
                              continue

                          df = pd.DataFrame(rows, columns=fields)
                          print(f"✅ Bung được {len(df)} dòng từ {name}")

                          # ===== Ghi file Parquet (overwrite) =====
                          out_name = name.replace(".xlsx", "_cache.parquet")
                          buf = io.BytesIO()
                          df.to_parquet(buf, index=False)
                          buf.seek(0)

                          upload_url = f"{GRAPH_API}/drives/{drive_id}/root:{SRC_FOLDER}/{out_name}:/content?@microsoft.graph.conflictBehavior=replace"
                          up = requests.put(upload_url, headers=headers, data=buf)
                          if up.ok:
                              print(f"📤 Đã ghi {out_name} thành công (overwrite).")
                          else:
                              print(f"❌ Lỗi ghi {out_name}:", up.text)

              except Exception as e:
                  print(f"❌ Lỗi khi xử lý {name}: {e}")

          print("\n🏁 Hoàn tất bung Pivot Cache.")
          PYCODE
