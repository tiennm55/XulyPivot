name: Extract PivotCache from Pivot_Month_Par via Excel Gateway

on:
  workflow_dispatch:

jobs:
  extract:
    runs-on: ubuntu-latest

    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          pip install pandas pyarrow openpyxl lxml requests

      - name: Run Pivot Extract via Gateway
        env:
          BASE_URL: "https://msgraph-excel-gateway.tuanvietc5.workers.dev"
          APIKEY: "EG2025_1"
          UPN: "tiennm@tuanvietc5.id.vn"
          FOLDER: "/1.Job/2425/1. Tracking/Pivot_Month_Par"
        run: |
          python - <<'PYCODE'
          import io, os, zipfile, requests, pandas as pd
          from lxml import etree

          BASE_URL = os.environ["BASE_URL"]
          APIKEY = os.environ["APIKEY"]
          UPN = os.environ["UPN"]
          FOLDER = os.environ["FOLDER"]

          params = {"path": FOLDER, "upn": UPN, "key": APIKEY}

          # ====== 📂 LẤY DANH SÁCH FILE ======
          list_url = f"{BASE_URL}/od/list"
          res = requests.get(list_url, params=params)
          if not res.ok:
              print("❌ Lỗi khi lấy danh sách:", res.text)
              exit(1)

          data = res.json()
          files = [f for f in data.get("items", []) if f["name"].lower().endswith(".xlsx")]

          if not files:
              print("⚠️ Không tìm thấy file .xlsx nào trong thư mục:", FOLDER)
              print("Response:", res.text)
              exit()

          print(f"🔎 Tìm thấy {len(files)} file trong {FOLDER}")

          # ====== 🔁 XỬ LÝ TỪNG FILE ======
          for f in files:
              name = f["name"]
              print(f"\n📥 Đang xử lý: {name}")

              dl_params = {"path": FOLDER, "file": name, "upn": UPN, "key": APIKEY}
              dl_url = f"{BASE_URL}/od/download"

              excel_bytes = requests.get(dl_url, params=dl_params).content

              try:
                  with zipfile.ZipFile(io.BytesIO(excel_bytes)) as z:
                      record_files = [p for p in z.namelist() if "pivotCacheRecords" in p]
                      if not record_files:
                          print("⚠️ Không có PivotCacheRecords trong file.")
                          continue

                      for record_file in record_files:
                          print(f"🔍 Bung {record_file} ...")
                          xml_data = z.read(record_file)
                          root = etree.fromstring(xml_data)
                          ns = {"d": "http://schemas.openxmlformats.org/spreadsheetml/2006/main"}

                          rows = []
                          for r in root.findall(".//d:r", ns):
                              values = [x.text for x in r.findall(".//d:x", ns)]
                              if values:
                                  rows.append(values)

                          if not rows:
                              print("⚠️ Không có dữ liệu trong cache.")
                              continue

                          df = pd.DataFrame(rows)
                          print(f"✅ Bung được {len(df)} dòng từ {name}.")

                          # ====== 💾 GHI RA FILE .PARQUET ======
                          base_name = name.replace(".xlsx", "")
                          out_parquet = f"{base_name}_cache.parquet"

                          buf_parq = io.BytesIO()
                          df.to_parquet(buf_parq, index=False)
                          buf_parq.seek(0)

                          ul_params_parq = {
                              "path": FOLDER,
                              "file": out_parquet,
                              "upn": UPN,
                              "key": APIKEY
                          }

                          upload_url = f"{BASE_URL}/od/upload"
                          up = requests.put(upload_url, params=ul_params_parq, data=buf_parq)

                          if up.ok:
                              print(f"📤 Đã ghi {out_parquet} thành công!")
                          else:
                              print(f"❌ Upload lỗi ({out_parquet}):", up.text)

              except Exception as e:
                  print(f"❌ Lỗi khi xử lý {name}: {e}")

          print("\n🏁 Hoàn tất bung toàn bộ Pivot Cache.")
          PYCODE
