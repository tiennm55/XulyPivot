name: Extract Pivot Cache Directly via Microsoft Graph API

on:
  workflow_dispatch:

jobs:
  extract:
    runs-on: ubuntu-latest

    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          pip install pandas pyarrow openpyxl lxml requests

      - name: Run Pivot Extract (Direct Graph)
        env:
          TENANT_ID: ${{ secrets.TENANT_ID }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          USER_EMAIL: "tiennm@tuanvietc5.id.vn"
          SRC_FOLDER: "/1.Job/2425/1. Tracking/Pivot_Month_Par"
        run: |
          python - <<'PYCODE'
          import os, io, zipfile, requests, pandas as pd
          from lxml import etree

          TENANT_ID = os.environ["TENANT_ID"]
          CLIENT_ID = os.environ["CLIENT_ID"]
          CLIENT_SECRET = os.environ["CLIENT_SECRET"]
          USER_EMAIL = os.environ["USER_EMAIL"]
          SRC_FOLDER = os.environ["SRC_FOLDER"]
          GRAPH_API = "https://graph.microsoft.com/v1.0"

          # ===== 🔑 Lấy access token =====
          print("🔐 Đang lấy access token ...")
          token_url = f"https://login.microsoftonline.com/{TENANT_ID}/oauth2/v2.0/token"
          token_data = {
              "grant_type": "client_credentials",
              "client_id": CLIENT_ID,
              "client_secret": CLIENT_SECRET,
              "scope": "https://graph.microsoft.com/.default",
          }
          token = requests.post(token_url, data=token_data).json().get("access_token")
          if not token:
              print("❌ Không lấy được token.")
              exit(1)
          headers = {"Authorization": f"Bearer {token}"}

          # ===== 📂 Lấy Drive ID =====
          drive_info = requests.get(f"{GRAPH_API}/users/{USER_EMAIL}/drive", headers=headers).json()
          if "id" not in drive_info:
              print("❌ Không lấy được Drive ID:", drive_info)
              exit(1)
          drive_id = drive_info["id"]
          print("📁 Drive ID:", drive_id)

          # ===== 🧭 Lấy danh sách file trong thư mục nguồn =====
          encoded_path = requests.utils.quote(SRC_FOLDER)
          list_url = f"{GRAPH_API}/drives/{drive_id}/root:{encoded_path}:/children"
          res = requests.get(list_url, headers=headers)
          if not res.ok:
              print("❌ Lỗi lấy danh sách:", res.text)
              exit(1)

          items = res.json().get("value", [])
          xlsx_files = [i for i in items if i["name"].lower().endswith(".xlsx")]
          print(f"🔎 Tìm thấy {len(xlsx_files)} file trong {SRC_FOLDER}")

          for f in xlsx_files:
              name = f["name"]
              print(f"\n📥 Đang xử lý: {name}")

              dl_url = f"{GRAPH_API}/drives/{drive_id}/items/{f['id']}/content"
              resp = requests.get(dl_url, headers=headers)
              excel_bytes = resp.content

              if excel_bytes[:4] != b'PK\x03\x04':
                  print(f"⚠️ {name} không phải Excel hợp lệ. (20 byte đầu: {excel_bytes[:20]})")
                  continue

              try:
                  with zipfile.ZipFile(io.BytesIO(excel_bytes)) as z:
                      records = [p for p in z.namelist() if "pivotCacheRecords" in p]
                      if not records:
                          print("⚠️ Không có PivotCacheRecords.")
                          continue

                      for rec in records:
                          print(f"🔍 Bung {rec} ...")
                          xml_data = z.read(rec)
                          root = etree.fromstring(xml_data)
                          ns = {"d": "http://schemas.openxmlformats.org/spreadsheetml/2006/main"}

                          rows = []
                          for r in root.findall(".//d:r", ns):
                              values = [x.text for x in r.findall(".//d:x", ns)]
                              if values:
                                  rows.append(values)
                          if not rows:
                              print("⚠️ Cache rỗng.")
                              continue

                          df = pd.DataFrame(rows)
                          print(f"✅ Bung được {len(df)} dòng từ {name}")

                          # ===== 💾 Ghi Parquet trở lại OneDrive =====
                          out_name = name.replace(".xlsx", "_cache.parquet")
                          buf = io.BytesIO()
                          df.to_parquet(buf, index=False)
                          buf.seek(0)

                          upload_url = f"{GRAPH_API}/drives/{drive_id}/root:{SRC_FOLDER}/{out_name}:/content"
                          up = requests.put(upload_url, headers=headers, data=buf)
                          if up.ok:
                              print(f"📤 Đã ghi {out_name} thành công!")
                          else:
                              print(f"❌ Lỗi ghi {out_name}:", up.text)

              except Exception as e:
                  print(f"❌ Lỗi khi xử lý {name}: {e}")

          print("\n🏁 Hoàn tất bung Pivot Cache.")
          PYCODE
